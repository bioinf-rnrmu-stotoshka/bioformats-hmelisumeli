"""
Модуль для анализа VCF файлов (Variant Call Format) - формата хранения генетических вариантов.
Предоставляет функциональность для чтения, парсинга и статистического анализа
данных генетических вариаций в VCF формате.

Основные компоненты:
- Класс Vcf_reader: основной класс для работы с VCF файлами
- Методы для извлечения различных типов заголовков
- Функции для статистического анализа вариантов
- Методы для работы с геномными регионами

Входные данные: VCF файлы (.vcf, .vcf.gz)
Выходные данные: статистика, таблицы с данными вариантов, информация по регионам
"""

import pandas as pd


class Vcf_reader:
    """
    КЛАСС VCF_READER - АНАЛИЗ VCF ФАЙЛОВ
    ====================================
    Основной класс для работы с VCF файлами формата.

    Логика работы класса:
    - Чтение и парсинг VCF файла с поддержкой различных кодировок
    - Извлечение структурированной информации из заголовков
    - Статистический анализ распределения генетических вариантов
    - Работа с геномными регионами и вычисление покрытия

    Атрибуты:
    - path: строка, путь к VCF файлу для анализа

    Методы:
    - _lines: служебный метод для построчного чтения файла
    - title: извлечение всех заголовочных строк
    - info: извлечение INFO заголовков
    - filter: извлечение FILTER заголовков
    - format: извлечение FORMAT заголовков
    - alt: извлечение ALT заголовков
    - contig: извлечение CONTIG заголовков
    - count: подсчет общего количества вариантов
    - stats: статистика по регионам с глубиной покрытия
    - varregion: поиск вариантов в заданном геномном регионе
    """

    def __init__(self, path: str):
        """
        КОНСТРУКТОР КЛАССА
        ==================
        Инициализирует анализатор VCF файлов.

        Логика работы:
        - Сохраняет путь к файлу для последующего использования
        - Подготавливает объект для методов чтения и анализа

        Входные данные:
        - path: строка, абсолютный или относительный путь к VCF файлу

        Выходные данные:
        - Инициализированный объект Vcf_reader
        """
        self.path = path

    def _lines(self):
        """
        СЛУЖЕБНЫЙ МЕТОД ДЛЯ ПОСТРОЧНОГО ЧТЕНИЯ
        ======================================
        Генератор для построчного чтения VCF файла.

        Логика работы:
        1. Открывает файл с указанной кодировкой (latin-1 для совместимости)
        2. Итерируется по всем строкам файла
        3. Удаляет пробельные символы в начале и конце каждой строки
        4. Возвращает строки через yield для эффективной обработки

        Выходные данные:
        - Генератор, возвращающий очищенные строки файла
        """
        with open(self.path, 'rt', encoding='latin-1') as f:
            for x in f:
                yield x.strip()

    def title(self):
        """
        ИЗВЛЕЧЕНИЕ ВСЕХ ЗАГОЛОВОЧНЫХ СТРОК
        ==================================
        Возвращает все строки заголовков VCF файла.

        Логика работы:
        - Фильтрует строки, начинающиеся с '##' (мета-информация)
        - Включает все типы заголовков: INFO, FILTER, FORMAT, ALT, contig

        Выходные данные:
        - Генератор строк полного заголовка VCF файла
        """
        return (x for x in self._lines() if x.startswith('##'))

    def info(self):
        """
        ИЗВЛЕЧЕНИЕ INFO ЗАГОЛОВКОВ
        ==========================
        Возвращает заголовки, описывающие поля в колонке INFO.

        Логика работы:
        - Фильтрует строки, начинающиеся с '##INFO'
        - Содержит описание дополнительных полей информации о вариантах

        Выходные данные:
        - Генератор строк с описанием INFO полей
        """
        return (x for x in self._lines() if x.startswith('##INFO'))

    def filter(self):
        """
        ИЗВЛЕЧЕНИЕ FILTER ЗАГОЛОВКОВ
        ============================
        Возвращает заголовки, описывающие критерии фильтрации.

        Логика работы:
        - Фильтрует строки, начинающиеся с '##FILTER'
        - Содержит описание фильтров, примененных к вариантам

        Выходные данные:
        - Генератор строк с описанием FILTER критериев
        """
        return (x for x in self._lines() if x.startswith('##FILTER'))

    def format(self):
        """
        ИЗВЛЕЧЕНИЕ FORMAT ЗАГОЛОВКОВ
        ============================
        Возвращает заголовки, описывающие формат полей для образцов.

        Логика работы:
        - Фильтрует строки, начинающиеся с '##FORMAT'
        - Определяет, какие параметры могут быть указаны для каждого образца
        - Описывает структуру данных в колонках образцов

        Выходные данные:
        - Генератор строк с описанием FORMAT полей
        """
        return (x for x in self._lines() if x.startswith('##FORMAT'))

    def alt(self):
        """
        ИЗВЛЕЧЕНИЕ ALT ЗАГОЛОВКОВ
        =========================
        Возвращает заголовки, описывающие альтернативные типы аллелей.

        Логика работы:
        - Фильтрует строки, начинающиеся с '##ALT'
        - Содержит описание нестандартных типов аллелей (структурные варианты)

        Выходные данные:
        - Генератор строк с описанием ALT типов
        """
        return (x for x in self._lines() if x.startswith('##ALT'))

    def contig(self):
        """
        ИЗВЛЕЧЕНИЕ CONTIG ЗАГОЛОВКОВ
        ============================
        Возвращает заголовки, содержащие информацию о хромосомах.

        Логика работы:
        - Фильтрует строки, начинающиеся с '##contig'
        - Содержит мета-информацию о референсных последовательностях
        - Может включать длину хромосом, сборки и другую информацию

        Выходные данные:
        - Генератор строк с описанием CONTIG (хромосом)
        """
        return (x for x in self._lines() if x.startswith('##contig'))

    def count(self):
        """
        ПОДСЧЕТ ОБЩЕГО КОЛИЧЕСТВА ВАРИАНТОВ
        ===================================
        Вычисляет общее количество генетических вариантов в VCF файле.

        Логика работы:
        1. Итерируется по всем строкам файла
        2. Игнорирует строки заголовков (начинающиеся с '#')
        3. Подсчитывает строки с данными вариантов

        Выходные данные:
        - int: общее количество вариантов в файле
        """
        count = 0
        for x in self._lines():
            if not x.startswith('#'):
                count += 1
        return count

    def stats(self, region_size=1000):
        """
        СТАТИСТИКА ПО РЕГИОНАМ С ГЛУБИНОЙ ПОКРЫТИЯ
        ==========================================
        Анализирует распределение вариантов по геномным регионам.

        Логика работы:
        1. Разбивает геном на регионы фиксированного размера
        2. Для каждого варианта определяет принадлежность к региону
        3. Извлекает глубину покрытия (DP) из поля INFO
        4. Агрегирует статистику по регионам

        Входные данные:
        - region_size: целое число, размер региона в базовых парах (по умолчанию 1000)

        Выходные данные:
        - DataFrame с колонками CHROM, REGION, TOTAL_DEPTH, VARIANT_COUNT
        """
        result = {}

        def varlines():
            """Внутренний генератор для строк вариантов."""
            for x in self._lines():
                if not x.startswith('#'):
                    yield x

        for y in varlines():
            columns = y.split('\t')
            if len(columns) < 8:
                continue
            chrom = columns[0]
            pos = int(columns[1])
            info = columns[7]
            dp = 0
            for x in info.split(';'):
                if x.startswith('DP='):
                    dp = int(x[3:])
                    break

            region_start = (pos // region_size) * region_size
            key = (chrom, region_start)
            if key not in result:
                result[key] = {'TOTAL_DEPTH': 0, 'VARIANT_COUNT': 0}
            result[key]['TOTAL_DEPTH'] += dp
            result[key]['VARIANT_COUNT'] += 1

        data = ([k[0], k[1], v['TOTAL_DEPTH'], v['VARIANT_COUNT']] for k, v in result.items())
        return pd.DataFrame(data, columns=['CHROM', 'REGION', 'TOTAL_DEPTH', 'VARIANT_COUNT'])

    def varregion(self, chrom, start, end):
        """
        ПОИСК ВАРИАНТОВ В ЗАДАННОМ ГЕНОМНОМ РЕГИОНЕ
        ===========================================
        Находит все варианты в указанном геномном интервале.

        Логика работы:
        1. Фильтрует строки вариантов, исключая заголовки
        2. Проверяет принадлежность варианта к целевой хромосоме
        3. Проверяет попадание позиции варианта в заданный интервал [start, end]
        4. Собирает информацию о подходящих вариантах

        Входные данные:
        - chrom: строка, название хромосомы (например, 'chr1')
        - start: целое число, начальная позиция региона
        - end: целое число, конечная позиция региона

        Выходные данные:
        - list: список списков, где каждый внутренний список содержит поля варианта
        """
        def gen():
            """Внутренний генератор для фильтрации вариантов."""
            for x in self._lines():
                if x.startswith('#'):
                    continue
                columns = x.strip().split('\t')
                if len(columns) < 2:
                    continue
                x_chrom = columns[0]
                x_pos = int(columns[1])
                if x_chrom == chrom and start <= x_pos <= end:
                    yield columns
        return list(gen())
